/*
  ‚úÖ Este archivo contiene el middleware encargado de **evaluar los resultados**
  de las reglas de validaci√≥n previamente definidas.

  üìå ¬øQu√© hace exactamente?
  - Usa `validationResult(req)` para revisar si alguna validaci√≥n fall√≥.
  - Si hay errores, responde con status 400 y los errores detallados.
  - Si NO hay errores, llama a `next()` para pasar al siguiente middleware o handler.

  üéØ ¬øPor qu√© separar este middleware?
  - Porque as√≠ evitamos repetir `validationResult(...)` en cada handler.
  - Porque nos da la posibilidad de personalizar el formato de errores una sola vez.
  - Porque se puede reutilizar para m√∫ltiples validadores (productos, usuarios, etc.)

  üöÄ Resultado:
  Usamos este middleware justo despu√©s del validador y antes del handler.
  Ejemplo en router:
    router.post("/", validateCreateProduct, handleValidationErrors, createProduct);
*/

import { Request, Response, NextFunction } from "express";
import { validationResult } from "express-validator";

export const handleInputErrors = (req: Request, res: Response, next: NextFunction) => {
 
  console.log('Desde Middleware')
   
  let errors = validationResult(req);
  if (!errors.isEmpty()) {
    // Si hay errores, devolvemos un 400 con la lista de errores
    return res.status(400).json({ errors: errors.array() });
  } 

  // Si no hay errores, continuamos con la ejecuci√≥n normal
  next(); // pasa al handler real
};
