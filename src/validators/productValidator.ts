/*
  ‚úÖ Este archivo define las **reglas de validaci√≥n** para crear un producto.

  üìå ¬øPor qu√© separar esto?
  Porque queremos que la l√≥gica de validaci√≥n est√© organizada, 
  sea f√°cil de leer, mantener y reutilizar en otras rutas si fuera necesario.

  ‚ö†Ô∏è Estas reglas NO eval√∫an si los datos son v√°lidos.
  Solo indican "qu√© condiciones debe cumplir cada campo".
  La evaluaci√≥n real se hace m√°s adelante con validationResult(req).

  Cada regla se define usando `check("campo")`, que revisa ese campo en el req.body.
*/

import { body } from "express-validator";

export const validateCreateProduct = [
  body("name")
    .notEmpty().withMessage("El nombre del producto no puede ir vac√≠o"),

  body("price")
    .notEmpty().withMessage("El precio no puede ir vac√≠o")
    .isNumeric().withMessage("Debe ser un n√∫mero")
    .custom(value => value > 0).withMessage("Debe ser mayor que cero"),
];

export const validateUpdateProduct = [
  body("name")
    .notEmpty().withMessage("El nombre del producto no puede ir vac√≠o"),

  body("price")
    .notEmpty().withMessage("El precio no puede ir vac√≠o")
    .isNumeric().withMessage("Debe ser un n√∫mero")
    .custom(value => value > 0).withMessage("Debe ser mayor que cero"),

  body("availability")
    .isBoolean().withMessage("Valor para disponibilidad no v√°lido"),
];
